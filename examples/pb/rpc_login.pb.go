// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/rpc_login.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("rpc/rpc_login.proto", fileDescriptor_17f756cc2d0dbb0a) }

var fileDescriptor_17f756cc2d0dbb0a = []byte{
	// 100 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x2a, 0x48, 0xd6,
	0x2f, 0x2a, 0x48, 0x8e, 0xcf, 0xc9, 0x4f, 0xcf, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97,
	0x12, 0x04, 0x73, 0xf4, 0x91, 0x84, 0x8c, 0xac, 0xb9, 0xb8, 0x3c, 0x7d, 0x40, 0x7c, 0xf7, 0xc4,
	0xdc, 0x54, 0x21, 0x5d, 0x2e, 0x4e, 0x04, 0x87, 0x4f, 0xcf, 0xd9, 0x28, 0x38, 0x1e, 0xce, 0x97,
	0xe2, 0xd3, 0x0b, 0x36, 0x72, 0x46, 0xf0, 0x95, 0x18, 0x9c, 0xd8, 0xa2, 0x58, 0xf4, 0xac, 0x0b,
	0x92, 0x92, 0xd8, 0xc0, 0x66, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x4f, 0x6d, 0x31,
	0x75, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ILoginGameClient is the client API for ILoginGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ILoginGameClient interface {
	LoginGame(ctx context.Context, in *C2S_LoginGame, opts ...grpc.CallOption) (*S2C_LoginGame, error)
}

type iLoginGameClient struct {
	cc *grpc.ClientConn
}

func NewILoginGameClient(cc *grpc.ClientConn) ILoginGameClient {
	return &iLoginGameClient{cc}
}

func (c *iLoginGameClient) LoginGame(ctx context.Context, in *C2S_LoginGame, opts ...grpc.CallOption) (*S2C_LoginGame, error) {
	out := new(S2C_LoginGame)
	err := c.cc.Invoke(ctx, "/ILoginGame/LoginGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ILoginGameServer is the server API for ILoginGame service.
type ILoginGameServer interface {
	LoginGame(context.Context, *C2S_LoginGame) (*S2C_LoginGame, error)
}

// UnimplementedILoginGameServer can be embedded to have forward compatible implementations.
type UnimplementedILoginGameServer struct {
}

func (*UnimplementedILoginGameServer) LoginGame(ctx context.Context, req *C2S_LoginGame) (*S2C_LoginGame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginGame not implemented")
}

func RegisterILoginGameServer(s *grpc.Server, srv ILoginGameServer) {
	s.RegisterService(&_ILoginGame_serviceDesc, srv)
}

func _ILoginGame_LoginGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_LoginGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ILoginGameServer).LoginGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ILoginGame/LoginGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ILoginGameServer).LoginGame(ctx, req.(*C2S_LoginGame))
	}
	return interceptor(ctx, in, info, handler)
}

var _ILoginGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ILoginGame",
	HandlerType: (*ILoginGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginGame",
			Handler:    _ILoginGame_LoginGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rpc_login.proto",
}
